import { ChatAgent } from '../../src/core/chat-agent-core';
import { Tool } from '../../src/tools/tools';

// Teste de sucesso de detec√ß√£o de loop
async function successfulLoopDetectionTest() {
  console.log('=== Teste de Sucesso: Detec√ß√£o de Loop ===\n');
  
  // Criar agente com modo ReAct
  const agent = new ChatAgent({
    name: 'Agente de Teste',
    instructions: 'Voc√™ √© um agente para testar detec√ß√£o de loops.',
    mode: 'react'
  });
  
  // Criar ferramenta que pode causar loop
  const searchTool: Tool = {
    name: 'search_tool',
    description: 'Ferramenta de busca',
    parameters: {
      type: 'object',
      properties: {
        query: { 
          type: 'string',
          description: 'Termo de busca'
        }
      },
      required: ['query']
    },
    execute: async (args: any) => {
      console.log(`[BUSCA] Executando busca para: ${args.query}`);
      return `Resultados para: ${args.query}`;
    }
  };
  
  agent.registerTool(searchTool);
  
  // Fun√ß√£o mock para simular LLM entrando em loop
  let mockCallCount = 0;
  (agent as any).callProviderFunction = async (message: string) => {
    mockCallCount++;
    console.log(`[MOCK] Chamada #${mockCallCount}`);
    
    if (message.includes('ATEN√á√ÉO') && message.includes('loop')) {
      console.log('[SISTEMA] Aviso de loop recebido, mudando estrat√©gia...');
      return `Thought: Recebi aviso de loop, vou tentar uma abordagem diferente
Final Answer: Detectei um loop e mudei minha abordagem.`;
    } else {
      // Simular comportamento que leva ao loop
      return `Thought: Preciso buscar novamente para ter certeza
Action: search_tool
Action Input: {"query": "informa√ß√£o espec√≠fica"}`;
    }
  };
  
  try {
    console.log('Iniciando conversa que deve causar loop...\n');
    
    // Esta chamada deve causar loop (a mesma ferramenta com os mesmos par√¢metros 3 vezes)
    const response = await agent.sendMessage('Busque a informa√ß√£o espec√≠fica');
    
    console.log('\n‚úÖ RESULTADO ESPERADO:');
    console.log('- O sistema detectou o loop ap√≥s 3 execu√ß√µes id√™nticas');
    console.log('- Uma mensagem de aviso foi emitida');
    console.log('- O sistema tentou uma nova abordagem');
    console.log('- O modo ReAct foi encerrado corretamente');
    console.log('- O agente retornou ao modo chat');
    
    console.log('\nResposta final:');
    console.log(response);
    
    console.log('\nüéâ A funcionalidade de detec√ß√£o de loops est√° funcionando corretamente!');
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
successfulLoopDetectionTest().catch(console.error);