import { ChatAgent } from '../../src/core/chat-agent-core';
import { Tool } from '../../src/tools/tools';

// Teste completo para demonstrar a funcionalidade de detec√ß√£o de loops
async function completeLoopDetectionDemo() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë              DEMONSTRA√á√ÉO: DETEC√á√ÉO DE LOOPS               ‚ïë');
  console.log('‚ïë                    Modo ReAct do SDK                        ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  
  // Criar agente com modo ReAct
  const agent = new ChatAgent({
    name: 'Assistente ReAct com Detec√ß√£o de Loops',
    instructions: 'Voc√™ √© um assistente avan√ßado com detec√ß√£o de loops. Evite repetir as mesmas a√ß√µes com os mesmos par√¢metros.',
    mode: 'react'
  });
  
  // Criar ferramenta que pode causar loop
  const testTool: Tool = {
    name: 'problematic_tool',
    description: 'Ferramenta que pode causar loops quando usada repetidamente com os mesmos par√¢metros',
    parameters: {
      type: 'object',
      properties: {
        data: { 
          type: 'string',
          description: 'Dados para processar'
        },
        operation: {
          type: 'string',
          description: 'Opera√ß√£o a ser realizada'
        }
      },
      required: ['data', 'operation']
    },
    execute: async (args: any) => {
      console.log(`[EXECUTANDO] ${args.operation} com dados: ${args.data}`);
      // Simular um resultado que n√£o resolve o problema, levando a repeti√ß√£o
      return { status: 'completed', result: `Processado: ${args.data}` };
    }
  };
  
  agent.registerTool(testTool);
  
  // Criar um provedor mock que simula o comportamento de loop
  let callCount = 0;
  (agent as any).callProviderFunction = async (message: string) => {
    callCount++;
    console.log(`\n[CHAMADA #${callCount}] Processando requisi√ß√£o...`);
    
    // Detectar se √© um aviso de loop
    if (message.includes('ATEN√á√ÉO') && message.includes('loop')) {
      console.log('üî¥ LOOP DETECTADO - INICIANDO PROCEDIMENTO DE RECUPERA√á√ÉO');
      return `Thought: Recebi um alerta de loop. Vou tentar uma abordagem diferente para resolver a tarefa.
Action: problematic_tool
Action Input: {"data": "nova_abordagem", "operation": "processamento_alternativo"}`;
    } else if (message.includes('limite de 3 a√ß√µes')) {
      console.log('üõë LIMITE DE TENTATIVAS ATINGIDO - MODO REACT INTERROMPIDO');
      return `Final Answer: O modo ReAct foi interrompido devido √† detec√ß√£o de loop persistente. O sistema est√° retornando ao modo de conversa√ß√£o normal.`;
    } else {
      // Comportamento que leva ao loop
      return `Thought: Ainda n√£o obtive o resultado esperado, vou tentar novamente com os mesmos par√¢metros.
Action: problematic_tool
Action Input: {"data": "teste_loop", "operation": "consulta_repetida"}`;
    }
  };
  
  console.log('üîß Configura√ß√£o conclu√≠da');
  console.log('üí° A ferramenta "problematic_tool" ser√° chamada repetidamente com os mesmos par√¢metros');
  console.log('‚ö° O sistema deve detectar o loop ap√≥s 3 execu√ß√µes id√™nticas\n');
  
  try {
    console.log('üöÄ Iniciando simula√ß√£o...\n');
    
    // Esta chamada ir√° disparar o mecanismo de detec√ß√£o de loops
    const response = await agent.sendMessage('Execute problematic_tool com {"data": "teste_loop", "operation": "consulta_repetida"}');
    
    console.log('\nüéØ RESULTADO FINAL:');
    console.log(response);
    
    console.log('\nüìã RESUMO DO PROCESSO:');
    console.log('‚úÖ 1. Agente executou a mesma ferramenta 3 vezes com os mesmos par√¢metros');
    console.log('‚úÖ 2. Sistema detectou o padr√£o de loop');
    console.log('‚úÖ 3. Mensagem de aviso foi enviada ao agente');
    console.log('‚úÖ 4. Foram concedidas 3 a√ß√µes para contornar o problema');
    console.log('‚úÖ 5. Como o loop persistiu, o modo ReAct foi interrompido');
    console.log('‚úÖ 6. Sistema retornou ao modo chat para interven√ß√£o humana');
    
    console.log('\n‚ú® A funcionalidade de detec√ß√£o de loops est√° funcionando perfeitamente!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a demonstra√ß√£o:', error);
  }
}

// Executar a demonstra√ß√£o
completeLoopDetectionDemo().catch(console.error);